AWSTemplateFormatVersion: "2010-09-09"
Description: "Parameter at us-east"

Parameters:
  SystemCode:
    Type: "String"
    Default: "email-uploader"
  SystemEnv:
    Type: "String"
  User:
    Type: "String"
  Password:
    Type: "String"

Resources:
  OAC:
    Type: "AWS::CloudFront::OriginAccessControl"
    Properties: 
      OriginAccessControlConfig:
        Description: Access Control
        Name: !Sub "oac-${SystemCode}-${SystemEnv}"
        OriginAccessControlOriginType: "s3"
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    DependsOn: OAC
    Properties: 
      DistributionConfig:
        Comment: !Sub "cloudfront-${SystemCode}-${SystemEnv}"
        Aliases:
          - { Fn::ImportValue: !Sub "hostedzone-${SystemCode}-${SystemEnv}-name" }
        DefaultRootObject: "index.html"
        DefaultCacheBehavior: 
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          TargetOriginId: !Sub "s3-${SystemCode}-${SystemEnv}-contents-asset"
          ViewerProtocolPolicy: "redirect-to-https"
          FunctionAssociations: 
            - EventType: "viewer-request"
              FunctionARN: !GetAtt CloudFrontFunctionBasicAuth.FunctionMetadata.FunctionARN
        Enabled: true
        Origins:
          - DomainName: !Sub "s3-${SystemCode}-${SystemEnv}-contents-asset.s3.ap-northeast-1.amazonaws.com"
            Id: !Sub "s3-${SystemCode}-${SystemEnv}-contents-asset"
            OriginAccessControlId: !GetAtt OAC.Id
            S3OriginConfig: 
              OriginAccessIdentity: ""
        PriceClass: "PriceClass_All"
        ViewerCertificate:
          AcmCertificateArn: { Fn::ImportValue: !Sub "acm-${SystemCode}-${SystemEnv}-arn" }
          SslSupportMethod: "sni-only"
        CustomErrorResponses:
          - ErrorCode: 404
            ResponsePagePath: /404.html
            ResponseCode: 200
            ErrorCachingMinTTL: 0
          - ErrorCode: 403
            ResponsePagePath: /404.html
            ResponseCode: 200
            ErrorCachingMinTTL: 0

  S3BucketPolicyContentsAsset:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        Bucket: !Sub "s3-${SystemCode}-${SystemEnv}-contents-asset"
        PolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - Sid: "AllowCloudFrontServicePrincipal"
              Effect: "Allow"
              Principal: 
                Service: 
                  - "cloudfront.amazonaws.com"
              Action: 
                - "s3:GetObject"
              Resource: 
                - !Sub "arn:aws:s3:::s3-${SystemCode}-${SystemEnv}-contents-asset/*"
              Condition: 
                StringEquals:
                  AWS:SourceArn: 
                    - !Join 
                      - ""
                      - - !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/"
                        - !Ref CloudFrontDistribution

  CloudFrontFunctionBasicAuth:
    Type: "AWS::CloudFront::Function"
    Properties: 
      Name: !Sub "func-${SystemCode}-${SystemEnv}-basic-auth"
      FunctionConfig:
        Comment: 'Basic Authentication'
        Runtime: cloudfront-js-1.0
      FunctionCode: !Sub 
        - |
          function handler(event) {
            var request = event.request;
            var headers = request.headers;

            // echo -n user:pass | base64
            var authString = "Basic ${authString}";

            if (
              typeof headers.authorization === "undefined" ||
              headers.authorization.value !== authString
            ) {
              return {
                statusCode: 401,
                statusDescription: "Unauthorized",
                headers: { "www-authenticate": { value: "Basic" } }
              };
            }

            return request;
          }
        - authString : !Base64
            Fn::Join: [ ":", [ !Ref User,  !Ref Password ] ]
      AutoPublish: true

  DnsRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      Name: { Fn::ImportValue: !Sub "hostedzone-${SystemCode}-${SystemEnv}-name" }
      Type: A
      HostedZoneId: { Fn::ImportValue: !Sub "hostedzone-${SystemCode}-${SystemEnv}-id" }
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # this is AWS-specific constant value

# Outputs:
#   CloudFrontDistributionAliases:
#     Value: !Ref DomainName
#     Export:
#       Name: !Sub "cloudfront-${SystemCode}-${SystemEnv}-aliases"